{"version":3,"sources":["views/page/Demo/ClassWriting/components/jsx/hasError.jsx","views/page/Demo/ClassWriting/components/jsx/index.jsx","views/page/Demo/ClassWriting/components/click/index.jsx","views/page/Demo/ClassWriting/components/diff/index.jsx","views/page/Demo/ClassWriting/components/ref/index.jsx","views/page/Demo/ClassWriting/components/axios/Aaxios.jsx","views/page/Demo/ClassWriting/components/axios/Baxios.jsx","views/page/Demo/ClassWriting/index.jsx"],"names":["HasErrorDemo","state","list","this","map","i","index","React","Component","JsxDemo","isShow","hasError","setShow","setState","console","log","onClick","style","color","error","ClickDemo","demo1","demo2","param","demo","bind","connect","user","DiffDemo","personList","id","name","age","addPerson","item","type","RefDemo","myRef","createRef","showData","input1","refs","value","showData2","input2","saveInputRef","currentNode","input3","showData3","showData4","current","showData5","e","target","ref","onBlur","placeholder","AxiosDemo","getStudentsData","axios","get","then","response","window","getCarsData","search","keyWord","keyWordDone","PubSub","publish","loading","url","fetch","json","data","items","err","message","c","Baxios","token","subscribe","msg","unsubscribe","length","widith","height","borderRadius","src","avatar_url","alt","LayoutContentClass","opacity","sex","address","count","newsArr","addCount","addCount2","props","nextProps","nextState","listRef","scrollHeight","preProps","preState","scrollTop","clearInterval","timer2","className","textAlign","n","Aaxios"],"mappings":"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","file":"static/js/24.d5f43dec.chunk.js","sourcesContent":["import React from 'react';\r\nclass HasErrorDemo extends React.Component {\r\n  state = {\r\n    list: [1, 2, 3]\r\n    // list: null,\r\n  };\r\n  render () {\r\n    return (\r\n      <>\r\n        <ul>\r\n          {this.state.list.map((i, index) =>\r\n            <li key={index}>{i}</li>\r\n          )}\r\n        </ul>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default HasErrorDemo;\r\n","import React, { Component } from 'react';\r\nimport HasErrorDemo from './hasError';\r\nclass JsxDemo extends Component {\r\n  state = {\r\n    isShow: true,\r\n    list: ['Angular', 'React', 'Vue'],\r\n    hasError: null\r\n  };\r\n\r\n  // 错误边界：生命周期函数，一旦后代组件发生错误就会触发(只是用生产环境)\r\n  static getDerivedStateFromError (error) {\r\n    return { hasError: error };\r\n  }\r\n  componentDidCatch () {\r\n    console.log('统计页面错误，发送请求给后台');\r\n  }\r\n\r\n  // ------------------setState-------------------------------------\r\n  setShow = () => {\r\n    // 严重注意：state必须通过setState进行更新，且更新的动作好是合并\r\n    this.setState({\r\n      isShow: !this.state.isShow\r\n    });\r\n    // this.props.speak('子组件传的参数'); //props传入的函数\r\n  };\r\n  render () {\r\n    const { isShow, list } = this.state;\r\n    return (\r\n      <div>\r\n        <hr />\r\n        <h2>*****Jsx写法*****</h2>\r\n        {/************  jsx结构内只能写表达式 、或者有返回值得语句（代码）***************/}\r\n\r\n        {/************************* 三元表达式 *****************************************************************/}\r\n        {isShow ? <span>控制功能块现实隐藏</span> : ''}\r\n        <button onClick={this.setShow}>显示/隐藏</button>\r\n\r\n        {/************************* for循环 / if判断  *****************************************************************/}\r\n        <ul>\r\n          {list.map((i, index) =>\r\n            i !== 'Angular' ? <li key={index}>{i}</li> : ''\r\n          )}\r\n        </ul>\r\n        {/************************* 子组件错误提示  *****************************************************************/}\r\n        {this.state.hasError ? <h2 style={{ color: 'red' }}>当前网络不稳定，稍后再试！</h2> : <HasErrorDemo />}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default JsxDemo;\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\n\r\nclass ClickDemo extends Component {\r\n  state = {}\r\n  // ------------------click写法传参-------------------------------------\r\n  demo () {\r\n    console.log('按钮1', this);\r\n  }\r\n  demo1 = () => {\r\n    console.log('按钮2', this);\r\n\r\n  }\r\n  demo2 = (param) => {\r\n    console.log('按钮3', param, this);\r\n\r\n  }\r\n  render () {\r\n    return (\r\n      <div>\r\n        <hr />\r\n        <h2>*****Click写法****</h2>\r\n        {/* \r\n          <button onClick={this.demo}>按钮1</button> \r\n          1、demo方法放在哪里?  —— LayoutContent的原型对象上，供实例使用\r\n          2、由于demo是作为onClick的回调，所有不是通过实例调用的，是直接调用\r\n          3、类中的方法默认开启局部的严格模式，所以demo方法的this为undefined\r\n          4、事件不能采用 return false 的方式来阻止浏览器的默认行为，而必须要地明确地调用preventDefault()来阻止默认行为\r\n        */}\r\n        <button onClick={this.demo.bind(this)}>按钮1</button>\r\n        <button onClick={this.demo1}>按钮2</button>\r\n        <button onClick={() => this.demo2('参数')}>按钮3</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(state => state.user)(ClickDemo);","import React, { Component } from 'react';\r\nclass DiffDemo extends Component {\r\n  state = {\r\n    personList: [\r\n      { id: 1, name: '小子', age: 18 },\r\n      { id: 2, name: '小李', age: 19 }\r\n    ]\r\n  }\r\n\r\n  addPerson = () => {\r\n    const { personList } = this.state;\r\n    const obj = { id: 3, name: '小王', age: 20 };\r\n    this.setState({ personList: [obj, ...personList] });\r\n  }\r\n\r\n  /**\r\n  慢动作回放  -- 使用index索引值做key的问题\r\n    初始化数据：\r\n      { id: 1, name: '小子', age: 18 }\r\n      { id: 2, name: '小李', age: 19 }\r\n    初始的虚拟DOM:\r\n      <li key=0> 小子 --- 18 </li>\r\n      <li key=1> 小李 --- 18 </li>\r\n   \r\n    添加小王 更新后的数据：\r\n      { id: 3, name: '小王', age: 20 }\r\n      { id: 1, name: '小子', age: 18 }\r\n      { id: 2, name: '小李', age: 19 }\r\n    更新数据后的虚拟DOM:  （把小王数据放在前面渲染，索引变了，那么旧的虚拟dom的key与新的虚拟dom的内容不一样，就创建新的真的dom替换页面中的dom，这就照成性能问题）\r\n      <li key=0> 小王 --- 18 </li>\r\n      <li key=1> 小子 --- 18 </li>\r\n      <li key=2> 小李 --- 18 </li>\r\n   */\r\n\r\n  render () {\r\n    const { personList } = this.state;\r\n    return (\r\n      <div>\r\n        <hr />\r\n        <h2>*****diff****</h2>\r\n        <h1>diff算法 -- 使用 index作为索引</h1>\r\n        <ul>\r\n          {\r\n            personList.map((item, index) => <li key={index}>{item.name} --- {item.age} <input type='text' /></li>)\r\n          }\r\n        </ul>\r\n        <h1>diff算法 -- 使用 id作为索引</h1>\r\n        <ul>\r\n          {\r\n            personList.map((item, index) => <li key={item.id}>{item.name} --- {item.age} <input type='text' /></li>)\r\n          }\r\n        </ul>\r\n        <button onClick={this.addPerson}>添加</button><br />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DiffDemo;","import React, { Component } from 'react';\r\nclass RefDemo extends Component {\r\n  state = {}\r\n  // 创建ref容器，一个容器对应一个\r\n  myRef = React.createRef();\r\n\r\n  // 字符串ref(弃用)\r\n  showData = () => {\r\n    // ref弃用，效率不高，\r\n    const { input1 } = this.refs;\r\n    console.log(input1.value);\r\n  }\r\n\r\n  // 内联ref\r\n  showData2 = () => {\r\n    console.log(this, this.input2.value);\r\n  }\r\n\r\n  // 内联ref写出外写函数(开发推荐内联)\r\n  saveInputRef = (currentNode) => {\r\n    this.input3 = currentNode;\r\n  }\r\n  showData3 = () => {\r\n    console.log(this.input3.value);\r\n  }\r\n\r\n  // createdRef (最推荐)\r\n  showData4 = () => {\r\n    console.log(this.myRef.current.value);\r\n  }\r\n  showData5 = (e) => {\r\n    // e.target指对应的dom节点（input（5））\r\n    console.log(e.target.value);\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <div>\r\n        <hr />\r\n        <h2>*****Ref****</h2>\r\n        {/* refs: 弃用ref字符串写法，效率不高；建议使用回调函数和createRef写法代替 /}\r\n        {/* <input ref='input1' type=\"text\" placeholder='点击提示数据' />&nbsp;\r\n        <button onClick={this.showData}>提示左侧数据</button>&nbsp; */}\r\n        {/*内联: a是input节点， this.input2 = a：this是LayoutContent实例对象，在实例对象上加个input2实例，然后将节点a赋值给input2*/}\r\n        <input ref={currentNode => this.input2 = currentNode} onBlur={this.showData2} type=\"text\" placeholder='失焦提示数据' />{/* (开发推荐内联) */}\r\n        {/* 不内联：内联会触发2次，要calss绑定的方式就不会 */}\r\n        <input ref={this.saveInputRef} onBlur={this.showData3} type=\"text\" placeholder='失焦提示数据3' />\r\n        {/* createdRef */}\r\n        <input ref={this.myRef} onBlur={this.showData4} type=\"text\" placeholder='失焦提示数据4' />\r\n        {/* 避免过度使用ref */}\r\n        <input onBlur={this.showData5} type=\"text\" placeholder='失焦提示数据5' />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RefDemo;","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport PubSub from 'pubsub-js';\r\n\r\nclass AxiosDemo extends Component {\r\n  state = {}\r\n  // 获取学生数据\r\n  getStudentsData = () => {\r\n    axios.get('/api1/students').then(\r\n      response => { window.console.log(response, '请求成功了！'); },\r\n      error => { window.console.log(error, '请求失败了！'); }\r\n    );\r\n  }\r\n  // 获取汽车数据\r\n  getCarsData = () => {\r\n    axios.get('/api2/cars').then(\r\n      response => { window.console.log(response, '请求成功了！'); },\r\n      error => { window.console.log(error, '请求失败了！'); }\r\n    );\r\n  }\r\n  // 搜索\r\n  search = async (type) => {\r\n    window.console.log(type);\r\n    // const obj = { a: { b: { c: 1 } } };\r\n    // const { a: { b: { c } } } = obj;  // 连续解构赋值\r\n    // const { a: { b: { c: data } } } = obj;  // 连续解构赋值 && 重命名\r\n    // window.console.log(c, data);\r\n\r\n    const { keyWordDone: { value: keyWord } } = this;\r\n    // window.console.log(this.keyWordDone.value, keyWord);\r\n\r\n    // 消息订阅发送\r\n    PubSub.publish('Aaxios', { name: 'tom', age: 18, list: [], loading: true });\r\n\r\n    // github后端用cos解决跨域了,不用前端做代理\r\n    const url = type === 'success' ? 'users' : 'users11';\r\n    // axios.get(`https://api.github.com/search/${url}?q=${keyWord}`).then(\r\n    //   response => {\r\n    //     window.console.log(response, '请求成功了！');\r\n    //     PubSub.publish('Aaxios', { name: 'tom', age: 18, list: response.data.items, loading: false, err: '' });\r\n    //   },\r\n    //   error => {\r\n    //     window.console.log(error, '请求失败了！');\r\n    //     PubSub.publish('Aaxios', { name: 'tom', age: 18, list: [], loading: false, err: error.message });\r\n    //   }\r\n    // );\r\n\r\n    // fetch 未优化\r\n    // fetch(`https://api.github.com/search/${url}?q=${keyWord}`).then(\r\n    //   // 这个里面返回的不是promise就会再走第二个then\r\n    //   response => {\r\n    //     window.console.log(response, '联系服务器成功！');\r\n    //     return response.json();\r\n    //   },\r\n    //   // error => {\r\n    //   //   window.console.log(error, '联系服务器失败了！'); //其实是有返回值，返回值是undefined\r\n    //   //   return new Promise(() => { });  // 中断promise链，返回一个新的promise实例就不会往下走了\r\n    //   // }\r\n    // ).then(\r\n    //   response => { window.console.log(response, '获取数据成功了222！'); },\r\n    //   // error => { window.console.log(error, '获取数据失败222！'); },\r\n    // ).catch(\r\n    //   error => { window.console.log(error); }\r\n    // );\r\n\r\n    // fetch 优化  try成功返回， catch失败返回，会带错误回调\r\n    try {\r\n      const response = await fetch(`https://api.github.com/search/${url}?q=${keyWord}`);\r\n      const data = await response.json();\r\n      window.console.log('请求成功', data);\r\n      PubSub.publish('Aaxios', { name: 'tom', age: 18, list: response.data.items, loading: false, err: '' });\r\n\r\n    } catch (error) {\r\n      window.console.log('请求出错', error);\r\n      PubSub.publish('Aaxios', { name: 'tom', age: 18, list: [], loading: false, err: error.message });\r\n    }\r\n\r\n\r\n  };\r\n\r\n\r\n  render () {\r\n    return (\r\n      <div>\r\n        <hr />\r\n        <h2>*****A-axios(消息订阅发送)****</h2>\r\n        <button onClick={this.getStudentsData}>获取学生数据</button>\r\n        <button onClick={this.getCarsData}>获取汽车数据</button><br />\r\n        <br />\r\n        <input ref={c => this.keyWordDone = c} type=\"text\" placeholder='输入关键词点击搜索' />\r\n        <button onClick={() => this.search('success')}>成功搜索</button>\r\n        <button onClick={() => this.search('error')}>失败搜索</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AxiosDemo;","import React, { Component } from 'react';\r\nimport PubSub from 'pubsub-js';\r\n\r\nexport default class Baxios extends Component {\r\n  state = {\r\n    name: '',\r\n    age: '',\r\n    list: [],\r\n    loading: false,\r\n    err: ''\r\n  }\r\n  componentDidMount () {\r\n    // 接收还能拿到消息订阅的token  // 消息订阅发送\r\n    this.token = PubSub.subscribe('Aaxios', (msg, data) => {\r\n      console.log(msg, data);\r\n      // this.setState({ ...data });\r\n      this.setState(data);\r\n    });\r\n  }\r\n  // 注销消息订阅\r\n  componentWillUnmount () {\r\n    PubSub.unsubscribe(this.token);\r\n  }\r\n  render () {\r\n    const { name, age, list, loading, err } = this.state;\r\n    console.log(list, 'list');\r\n    return (\r\n      <div>\r\n        <h2>*****B-axios(消息订阅接收)****</h2>\r\n        {name && age ? <div>{name}---{age}</div> : ''}\r\n        {\r\n          loading ? <h2>Loading......</h2> :\r\n            err ? <h2 style={{ color: 'red' }}>{err}</h2> :\r\n              list.length === 0 ? '暂无数据' :\r\n                list.map(i => <img style={{ widith: '100px', height: '100px', borderRadius: '50%' }} src={i.avatar_url} key={i.id} alt=\"\" />)\r\n        }\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","// PureComponent代替component，阀门生命周期的就不用写了，PureComponent会自动写好阀门的对比逻辑：从而提示组件在数据没变化的时候不会render组件\n// import React, { Component, PureComponent } from 'react';\nimport React, { Component } from 'react'\nimport { connect } from 'react-redux'\n\nimport './index.scss'\n\n// 引用事例\nimport JsxDemo from './components/jsx'\nimport ClickDemo from './components/click'\nimport DiffDemo from './components/diff'\nimport RefDemo from './components/ref'\n\nimport AaxiosDemo from './components/axios/Aaxios'\nimport BaxiosDemo from './components/axios/Baxios'\n\n// ---------------------------------类式组件-----------------------------------------------------------\n\n// class LayoutContentClass extends PureComponent {\nclass LayoutContentClass extends Component {\n  // 渲染1次 构造器能省略就省略不写\n  // constructor(props) {\n  //   super(props);\n  //   // this.state= {name:'11'}\n  //   // this.add = this.add.bind(this)\n  //   // console.log('Content-constructor');\n  // }\n\n  // *********初始化状态state**********************************************************\n  state = {\n    opacity: 1,\n    sex: '女',\n    address: '中国北京。。。',\n    count: 0,\n    newsArr: [],\n    hasError: ''\n  }\n\n  // {/************************* setState *****************************************************************/}\n  // 对象式setState：如果新状态不依赖于原状态，比如点击直接等于99\n  addCount = () => {\n    this.setState({ count: 99 })\n  }\n  // 函数式setState：如果新状态依赖于原状态 ===> 使用函数方式，修改原来的数据\n  addCount2 = () => {\n    // 1、setState函数式写法\n    this.setState((state, props) => {\n      console.log(state, props)\n      return { count: state.count + 1 }\n    })\n    // 2、setState对象式写法\n    // const { count } = this.state;\n    // this.setState({ count: count + 1 });\n  }\n\n  // {/************************* 生命周期函数 *****************************************************************/}\n  // （阀门）控制组件更新的阀门; state状态改变触发的生命周期钩子\n  // (开发不用写，使用PureComponent代替，会自动给我们匹配)\n  shouldComponentUpdate(nextProps, nextState) {\n    // 不写，react默认会在后台加这钩子并返回true,写了返回false,生命周期就不往下走了\n    // this.props,this.state：修改数据前的props和state\n    // nextProps,nextState：修改后的变化的props,state\n    // 数据不改变就不更当前新组件\n    console.log('Content-shouldComponentUpdate')\n    // console.log(this.state.count, nextState.count);\n    // return !this.state.count === nextState.count; //根据数据是否改变，来渲染组件\n    return true //根据数据是否改变，来渲染组件\n  }\n\n  // 组件挂载完毕的钩子（mounted）(*常用*)  初始化，发生ajax\n  componentDidMount() {\n    console.log('Content-componentDidMount')\n    // this.timer2 = setInterval(() => {\n    //   const { newsArr } = this.state;\n    //   const news = `新闻${newsArr.length + 1}`;\n    //   this.setState({ newsArr: [news, ...newsArr] });\n    // }, 1000);\n  }\n  // (新增) 当组件的数据完全使用props传递进来的才用的生命周期钩子\n  static getDerivedStateFromProps(props, state) {\n    console.log('Content-getDerivedStateFromProps')\n    return null\n  }\n  // (新增)的两个生命周期钩子：\n  getSnapshotBeforeUpdate() {\n    console.log('Content-getSnapshotBeforeUpdate')\n    return this.listRef.scrollHeight\n  }\n  // 组件已经更新生命周期钩子\n  componentDidUpdate(preProps, preState, height) {\n    // console.log('Content-componentDidUpdate'); //111\n    // this.refs.list.scrollTop += this.refs.list.scrollHeight - height;\n    this.listRef.scrollTop += this.listRef.scrollHeight - height\n  }\n\n  // 组件将要卸载的钩子  (*常用*)\n  componentWillUnmount() {\n    clearInterval(this.timer2)\n    console.log('Content-componentWillUnmount')\n  }\n\n  // 1、初始化渲染,状态更新之后渲染 、(渲染 1+n次，每次修改数据都会重新渲染 jsx)\n  // 2、在class类内部定义的方法已经自动开启了严格模式，类内部方法的this不指向window\n  render() {\n    // render中的this —— LayoutContent的实例对象\n    return (\n      //下面的结构不是真正的html，是jsx,虚拟dom，需要ReactDOMx渲染成真实的html标签显示在页面\n      <div className='layoutContent' id='LayoutContentClass'>\n        <h1 style={{ color: 'red', textAlign: 'center' }}>类式组件写法</h1>\n        {/*************************  事例+getSnapshotBeforeUpdate *****************************************************************/}\n        {/* <div className='list' ref='list'> */}\n        <div className='list' ref={c => (this.listRef = c)}>\n          {this.state.newsArr.map((n, index) => (\n            <div key={index} className='news'>\n              {n}\n            </div>\n          ))}\n        </div>\n\n        <JsxDemo />\n        {/* 批量props传值：展开运算符的写法是一个个写的语法糖 */}\n        <ClickDemo />\n        <DiffDemo />\n        <RefDemo />\n\n        <AaxiosDemo />\n        <BaxiosDemo />\n      </div>\n    )\n  }\n}\n\n// connect用这个方法reducers才监听的到\nexport default connect(state => state.user)(LayoutContentClass)\n"],"sourceRoot":""}